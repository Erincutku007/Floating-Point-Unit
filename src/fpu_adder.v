// Generated by CIRCT firtool-1.40.0
module floatingPointAdder(	// <stdin>:3:10
  input         clock,	// <stdin>:4:11
                reset,	// <stdin>:5:11
  input  [31:0] io_a,	// src/main/scala/core/lite/Execute/FPU_ADD.scala:11:14
                io_b,	// src/main/scala/core/lite/Execute/FPU_ADD.scala:11:14
  input         io_op,
  input  [2:0]rounding_mode,
  output [31:0] io_y,	// src/main/scala/core/lite/Execute/FPU_ADD.scala:11:14
  output [8:0]  io_exponent_diff,
  output [24:0] io_mantissa_res
);

 
  wire        a_sign = io_a[31];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:16:36
  wire [7:0]  a_exponent = io_a[30:23];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:17:36
  wire [22:0] a_mantissa = io_a[22:0];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:18:36
  
  wire        b_sign = io_b[31];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:20:36
  wire [7:0]  b_exponent = io_b[30:23];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:21:36
  wire [22:0] b_mantissa = io_b[22:0];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:22:36
  
  wire [8:0]  exponent_diff = a_exponent - b_exponent;	// src/main/scala/core/lite/Execute/FPU_ADD.scala:17:36, :21:36, :25:31, :50:10
  assign io_exponent_diff = exponent_diff;
  wire        lower = exponent_diff[8];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:25:31, :26:34, :27:{35,43}, :28:40, :51:33
  wire [8:0]  exponent_diff_2_complement = ~exponent_diff + 9'h1;	// src/main/scala/core/lite/Execute/FPU_ADD.scala:25:31, :30:{46,61}
  wire [8:0]  _exponent_diff_abs_T = lower ? exponent_diff_2_complement : exponent_diff;	// src/main/scala/core/lite/Execute/FPU_ADD.scala:25:31, :28:40, :30:61, :33:38
  wire [22:0] mantissa_shift_input = lower ? a_mantissa : b_mantissa;	// src/main/scala/core/lite/Execute/FPU_ADD.scala:18:36, :22:36, :28:40, :36:44
  wire [47:0] mantissa_shifted = {2'b01, mantissa_shift_input, 23'b0} >> _exponent_diff_abs_T[3:0];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:33:{21,38}, :35:41, :36:44, :37:{33,58}
  wire [31:0] adder_op_2 = io_op ? (~mantissa_shifted[47:16]+32'b1) : mantissa_shifted[47:16];
  wire [22:0] adder_op_1_1 = lower ? b_mantissa : a_mantissa;	// src/main/scala/core/lite/Execute/FPU_ADD.scala:18:36, :22:36, :28:40, :39:46
  wire [31:0] adder_op_1 = {2'b01, adder_op_1_1, 7'b0};
  
//TEST SIGNAL
//  wire [24:0] adder_op_2_test = {1'h0, mantissa_shifted};
  
  wire [31:0] mantissa_res = adder_op_1 + adder_op_2;	// src/main/scala/core/lite/Execute/FPU_ADD.scala:35:41, :39:46, :41:49, :50:10
  assign io_mantissa_res = mantissa_res;
  wire mantissa_MSB = mantissa_res[31];
  
  wire [31:0] mantissa_res_2_complement = ~mantissa_res + 32'b1;
  wire [31:0] mantissa_final_unshifted = (mantissa_MSB & io_op)  ? mantissa_res_2_complement : mantissa_res;
  wire [4:0] mantissa_shamt,index;
  wire [31:0] mantissa_final_unshifted_pruned = {mantissa_final_unshifted[30:0],1'b0};
  
  PriorityEncoder32 encoder(mantissa_final_unshifted_pruned,index);
  
  assign mantissa_shamt = io_op ? index : {4'h0,mantissa_MSB};
  
  wire [31:0] mantissa_res_left_shifted = mantissa_final_unshifted_pruned << index;
  wire [31:0] mantissa_res_right_shifted = mantissa_res >> mantissa_MSB;
  
  wire [23:0] _y_mantissa_T_1 = io_op ? mantissa_res_left_shifted[31:8] : (mantissa_res_right_shifted[30:7]);	// src/main/scala/core/lite/Execute/FPU_ADD.scala:41:49, :42:37, :52:{29,36}
  wire [22:0] y_mantissa = _y_mantissa_T_1[22:0];	// src/main/scala/core/lite/Execute/FPU_ADD.scala:48:35, :52:{14,36}
  
  wire [7:0]  y_exponent_s1 = io_op ? (~{3'h0,mantissa_shamt}+8'd1) :{3'h0,mantissa_shamt};
  wire [7:0]  y_exponent =
    (lower ? b_exponent : a_exponent) + y_exponent_s1;	// src/main/scala/core/lite/Execute/FPU_ADD.scala:17:36, :21:36, :28:40, :41:49, :42:37, :44:28, :47:35, :51:33
  
//  wire sub_sign = ;
//    wire y_sign = io_op ? (mantissa_co | exponent_diff[8]) : a_sign;
  reg y_sign;
  always@(*)begin
        if (io_op) begin
            y_sign = mantissa_MSB | exponent_diff[8];
        end
        else
            y_sign = a_sign;
  end
  //rounding
  wire [2:0]GRS;
  wire [1:0]GR;
  wire S;
  assign GR = io_op ? mantissa_res_left_shifted[7:6] : (mantissa_res_right_shifted[6:5]);
  assign S =  (io_op & mantissa_res_left_shifted[4]) | (|mantissa_res_left_shifted[3:0] | (|mantissa_shifted[15:0]));
  reg round_up;
  assign GRS = {GR,S};
    always@(*) begin
        round_up = 0;
        case(rounding_mode)
            3'b000: round_up = ~((GRS[2] == 1'b0) | ((GRS == 3'b100) & (_y_mantissa_T_1[0]==1'b0) ) ); //RNE
                                                                                                //RTZ chops the value.
            3'b010: round_up = a_sign & (|GRS);                                                  //RDN if any of the bits are asserted when sgn=1 round mantissa up
            3'b011: round_up = (~a_sign) & (|GRS);                                               //RUP if any of the bits are asserted when sgn=0 round mantissa up
            3'b100: round_up = |GRS;
            default: round_up = ~((GRS[2] == 1'b0) | ((GRS == 3'b100) & (_y_mantissa_T_1[0]==1'b0) ) );
        endcase
    end
  //output assignments
  wire [24:0]rounded_mantissa;
  wire co;
  assign rounded_mantissa = {2'b01,y_mantissa} + {24'b0,round_up};
  wire [23:0] one_dot_mantissa = rounded_mantissa >> rounded_mantissa[24];
  wire [22:0] mantissa = one_dot_mantissa[22:0];
  wire [7:0]  exponent = y_exponent + {7'b0,rounded_mantissa[24]};
  assign io_y = {y_sign, exponent, mantissa};	// <stdin>:3:10, src/main/scala/core/lite/Execute/FPU_ADD.scala:46:31, :47:35, :48:35, :54:32
endmodule